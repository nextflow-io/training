# Nextflow Training Materials Development Rules

## Repository Overview

This repository contains Nextflow training materials built with Material for MkDocs.
The content is organized into multiple training modules including:
- Hello Nextflow (basic introduction)
- Hello nf-core (nf-core framework)
- Nextflow for Science (genomics, RNAseq)
- Side Quests (advanced topics)
- Training Collections (curated learning paths)

## Code and Content Guidelines

### Nextflow Scripts (.nf files)

1. All Nextflow scripts should follow DSL2 syntax
2. Always start with shebang: `#!/usr/bin/env nextflow`
3. Use UPPERCASE for process names (e.g., `process SPLITLETTERS`)
4. Use params for configurable values: `params.greeting = 'default value'`
5. Include inline comments to explain complex logic
6. Keep example scripts simple and educational

Example pattern:
```groovy
#!/usr/bin/env nextflow

params.input = 'default_value'

process PROCESS_NAME {
    input:
    val x

    output:
    path 'output.txt'

    script:
    """
    command $x > output.txt
    """
}

workflow {
    PROCESS_NAME(params.input)
}
```

### Markdown Documentation

1. **Formatting**:
    - Use Prettier for formatting (format on save recommended)
    - Start each sentence on a new line (cleaner diffs, still renders as paragraph)
    - Use numbered headings with trailing periods: `## 1. Section Name`
    - Ensure heading levels match numbering depth (## for 1., ### for 1.1.)

2. **Structure**:
    - Each section should end with:
        - "### Takeaway" - summarize what was learned
        - "### What's next?" - preview next section
    - Use orientation pages (00_orientation.md) to introduce modules
    - Include survey.md and next_steps.md at end of modules

3. **Admonitions** (special callout boxes):
    - `!!! note` - informational notes
    - `!!! tip` - helpful tips
    - `!!! warning` - important warnings
    - `??? exercise` - collapsible exercise (custom type)
    - `??? result` or `??? solution` - collapsible solutions (custom types)
    - Always indent content properly (4 spaces)

4. **Code Blocks**:
   - Use `linenums="1"` for line numbers
   - Use `hl_lines` to highlight specific lines
   - Use `title="filename"` to show filenames
   - For before/after comparisons, use tabbed blocks with `=== "After"` and `=== "Before"`

5. **Excalidraw Diagrams**:
    - Create diagrams with .excalidraw.svg extension
    - Use VSCode Excalidraw extension for editing
    - Embed with:
        ```html
        <figure class="excalidraw">
        --8<-- "docs/path/to/diagram.excalidraw.svg"
        </figure>
        ```
    - Path is from repo root, not markdown file location

### File Organization

1. **Solutions**:
    - Place solution files in corresponding `solutions/` subdirectories
    - Mirror the structure of exercise files
    - Solution files should be complete, working examples

2. **Module Structure**:
    ```
    module_name/
    ├── index.md (overview)
    ├── 00_orientation.md (introduction)
    ├── 01_topic.md (numbered lessons)
    ├── 02_topic.md
    ├── survey.md (feedback form)
    ├── next_steps.md (what to learn next)
    └── solutions/ (working code)
    ```

3. **Assets**:
   - Images go in `docs/*/img/` directories
   - Use Excalidraw for editable diagrams
   - Keep static assets organized by module

## Development Workflow

### Local Preview

Use one of these methods to preview changes:

**Docker** (recommended):
```bash
docker run --rm -it -p 8000:8000 -v ${PWD}:/docs ghcr.io/nextflow-io/training-mkdocs:latest
```

**Python**:
```bash
pip install -r requirements.txt
mkdocs serve
```

If social cards cause issues:
```bash
CARDS=false mkdocs serve
```

### Content Validation

1. **Heading validation**: Run before committing
   ```bash
   uv run .github/check_headings.py docs/**/*.md
   uv run .github/check_headings.py --fix docs/**/*.md  # auto-fix
   ```

2. **Prettier formatting**: Should run automatically on save
   - Install VSCode Prettier extension
   - Or run: `prettier --write docs/**/*.md`

3. **TODO tracking**: Use TODO comments for future work
   - Recommended: Todo Tree VSCode extension
   - Pattern: `// TODO: description of what needs to be done`

### Testing Nextflow Examples

1. Always test example scripts before committing
2. Verify outputs are as documented
3. Check that error examples actually produce the expected errors
4. Test with resume functionality where applicable:
   ```bash
   nextflow run example.nf
   nextflow run example.nf -resume
   ```

## Common Patterns and Conventions

### CLI Parameter Documentation

Always show both forms:
- Nextflow parameters: single hyphen (`-resume`, `-with-docker`)
- Pipeline parameters: double hyphen (`--greeting`, `--input`)

### Console Output Examples

Use proper formatting:
```console title="Output" linenums="1"
N E X T F L O W  ~  version 25.04.3
Launching `script.nf` [name] DSL2
```

### File Path References

Use code formatting for:
- Files: `hello-world.nf`
- Directories: `work/`, `results/`
- Paths: `work/a3/7be2fa.../output.txt`

### Commands and Outputs

Show both command and expected output:
```bash
nextflow run hello.nf
```

```console title="Output"
[Expected output here]
```

## MkDocs Configuration

- Main config: `mkdocs.yml`
- Navigation structure defined in `nav:` section
- Custom styling in `docs/assets/`
- Overrides in `docs/assets/overrides/main.html`

## Git Workflow

1. Fork repository to personal account
2. Develop locally with live preview
3. Run validation tools (headings, prettier)
4. Test Nextflow examples
5. Commit with clear, descriptive messages
6. Push to fork
7. Open pull request against main repo

## Additional Notes

- Training is designed for GitHub Codespaces but works locally
- Multiple language translations exist (.pt, .it, .es, .fr, .ko suffixes)
- Video transcripts in `transcripts/` subdirectories
- Pre-commit hooks configured in `.pre-commit-config.yaml`
- Social media cards auto-generated from frontmatter

## When Creating New Content

1. **New exercise**: Create paired exercise and solution files
2. **New module**: Follow the module structure pattern above
3. **New side quest**: Add to `side-quests/` with clear orientation
4. **New examples**: Place in appropriate training directory with README
5. **Update navigation**: Edit `mkdocs.yml` nav section
6. **Test thoroughly**: Ensure all Nextflow examples run successfully
